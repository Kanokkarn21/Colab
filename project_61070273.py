# -*- coding: utf-8 -*-
"""Project-61070273.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k_lX3RNc6zJzq-zOxWTIErJHn9slKPuR

# **Thailand and the world at the Olympic Games**
**การวิเคราะห์ข้อมูลของการแข่งขันโอลิมปิกใน 120 ปีที่ผ่าน รวมถึงวิเคราะห์ว่าประเทศไทยมีผลงานอย่างไรในโอลิมปิก**

**นำเข้าข้อมูล**
"""

pip install squarify

import pandas as pd
import numpy as np
data = pd.read_csv('/content/drive/My Drive/120-years-of-olympic-history-athletes-and-results/athlete_events.csv')
data.head()

data

import pandas as pd
import numpy as np
data2 = pd.read_csv('/content/drive/My Drive/120-years-of-olympic-history-athletes-and-results/noc_regions.csv')
data2.head()

data2

"""**รวม athlete_events.csv กับ noc_regions.csv เข้าด้วยกัน**"""

olp_data=data.merge(data2,on='NOC',how='left')
olp_data.head(n=3)

olp_data

"""**ค้นหาปีที่มีการจัดกีฬาโอลิมปิก**"""

print('โอลิมปิกฤดูร้อน :',np.array(sorted(data[data['Season']=='Summer']['Year'].unique())))
print('โอลิมปิกฤดูหนาว :',np.array(sorted(data[data['Season']=='Winter']['Year'].unique())))

"""**ค้นหาเมืองที่เป็นเจ้าบ้านเกมกีฬาโอลิมปิก**"""

Cities=data.groupby('City').apply(lambda x:x['Year'].unique()).to_frame().reset_index()
Cities.columns=['City','Years']
Cities['Occurence']=[len(c) for c in Cities['Years']]
Cities.sort_values('Occurence',ascending=False)

"""**ความสัมพันธ์ระหว่างอายุน้ำหนักและส่วนสูงของนักกีฬาโอลิมปิก**"""

data[['Age','Height','Weight']].corr()

"""**การมีส่วนร่วมของชายและหญิงในการแข่งขันกีฬาโอลิมปิก**"""

print('จำนวนนักกีฬาทั้งหมดที่เข้าร่วมการแข่งขันกีฬาโอลิมปิก :',len(data.ID.unique()))

print('จำนวนนักกีฬาหญิงที่เข้าร่วม :',len(data[data.Sex=='F']))
print('จำนวนนักกีฬาชายที่เข้าร่วม :',len(data[data.Sex=='M']))

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
from PIL import Image
# %matplotlib inline
import numpy as np
import seaborn as sns
data.Sex.unique()
data.Sex.value_counts()
sns.countplot(data.Sex)
plt.title('Male Female participation in Olympic',size=15,color='red')
plt.show()

part = data.groupby('Year')['Sex'].value_counts()
part.loc[:,'F'].plot(title='Men/Women participation in Olympic',figsize=(13,5)).set_ylabel("Athletes")
part.loc[:,'M'].plot()

"""**นักกีฬาเข้าร่วมในโอลิมปิกฤดูร้อน**"""

ath=data[data['Season']=='Summer'].groupby('Year')['ID'].count()
plt.figure(figsize=(15, 10))
ath.plot(kind='line',color='red')
plt.xlabel('Year')
plt.ylabel('No of Athletes')
plt.show()

"""**นักกีฬาเข้าร่วมในโอลิมปิกฤดูหนาว**"""

ath=data[data['Season']=='Winter'].groupby('Year')['ID'].count()
plt.figure(figsize=(15, 10))
ath.plot(kind='line',color='blue')
plt.xlabel('Year')
plt.ylabel('No of Athletes')
plt.show()

"""**การค้นหานักกีฬาที่อายุน้อยที่สุด อายุมากที่สุดและอายุมัธยฐาน(ค่ากึ่งกลางของข้อมูล)ให้เข้าร่วมในเกม**"""

print('นักกีฬาที่อายุน้อยที่สุด :',data.Age.min())
print('อายุเฉลี่ยของนักกีฬา :',data.Age.mean())
print('นักกีฬาที่อายุมากที่สุด :',data.Age.max())

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
from PIL import Image
# %matplotlib inline
import numpy as np

y=np.array([data.Age.min(),data.Age.mean(),data.Age.max()])
x=['Youngest','Average','Oldest']
plt.bar(x,y)
plt.xlabel('Feature')
plt.ylabel('Age')
plt.show()

"""**ข้อมูลอายุ ความสูง และน้ำหนักของนักกีฬา**"""

x=sns.distplot(data['Age'].dropna(),color='Red',kde=True)
x.set_title('Age Distribution of Athletes',fontsize=16,fontweight=200)

h=sns.distplot(data['Height'].dropna(),color='Green',kde=True)
h.set_title('Height Distribution of Athletes',fontsize=16,fontweight=200)

w=sns.distplot(data['Weight'].dropna(),color='Blue',kde=True)
w.set_title('Weight Distribution of Athletes',fontsize=16,fontweight=200)

f,ax=plt.subplots(figsize=(20,10))
sns.distplot(data['Age'].dropna(),color='Red',kde=True)
sns.distplot(data['Height'].dropna(),color='Green',kde=True)
sns.distplot(data['Weight'].dropna(),color='Blue',kde=True)

"""**10 ประเทศติดอันดับใน 120 ปีของการแข่งขันกีฬาโอลิมปิก**"""

data.Medal.value_counts()

plt.subplot(3,1,1)
gold = data[data.Medal == "Gold"].Team.value_counts().head(10)
gold.plot(kind='bar',rot=0,figsize=(20, 10))
plt.ylabel("Gold Medal")
plt.subplot(3,1,2)
silver = data[data.Medal == "Silver"].Team.value_counts().head(10)
silver.plot(kind='bar',rot=0,figsize=(20, 10))
plt.ylabel("Silver Medal")
plt.subplot(3,1,3)
bronze = data[data.Medal == "Bronze"].Team.value_counts().head(10)
bronze.plot(kind='bar',rot=0,figsize=(20, 10))
plt.ylabel("Bronze Medal")

plt.show()

plt.figure(figsize=(15, 10))
topc=olp_data.groupby('region')['Medal'].count().nlargest(10).reset_index()
sns.barplot('region','Medal',data=topc)
plt.title('Top Countries in Olympic Medals')
plt.show()

"""**ประเทศที่ได้รับเหรียญมากที่สุดในแต่ละปี**"""

plt.figure(figsize=(15, 10))
topm=olp_data.groupby(['region','Year'])['Medal'].count().reset_index()
topm=topm[topm['region'].isin(olp_data['region'].value_counts()[:5].index)]
#topm=topm.pivot('region','Year','Medal').fillna(0)
sns.lineplot(topm['Year'],topm['Medal'],hue=topm['region'])

"""**ประเมินประสิทธิภาพของประเทศไทยในกีฬาโอลิมปิก**"""

import seaborn as sns
medal=data[data.Medal.notnull()]
Thailand_medals=medal[medal.Team=='Thailand']
Thailand_medals.head()
sns.countplot(x='Medal',data=Thailand_medals)

"""**รายละเอียดของเกมที่ประเทศไทยได้รับรางวัล เรียงจากเหรียญทอง เหรียญเงิน และเหรียญทองแดง**"""

gold = data[(data.Medal == 'Gold')]
goldTHA = gold.loc[gold['NOC'] == 'THA']
goldTHA.Event.value_counts().reset_index(name='Medal').head(20)

Silver = data[(data.Medal == 'Silver')]
SilverTHA = Silver.loc[Silver['NOC'] == 'THA']
SilverTHA.Event.value_counts().reset_index(name='Medal').head(20)

Bronze = data[(data.Medal == 'Bronze')]
BronzeTHA = Bronze.loc[Bronze['NOC'] == 'THA']
BronzeTHA.Event.value_counts().reset_index(name='Medal').head(20)

"""**รายละเอียดของนักกีฬาของประเทศไทยทั้งหมดที่ไปแข่งกีฬาโอลิมปิก**"""

MedalsTHA = olp_data[olp_data['NOC'] == 'THA']
MedalsTHA

olp_data

"""**นักกีฬาหญิงทั้งหมดของประเทศไทย**"""

Ftha = olp_data[(olp_data.Sex == 'F')]
Female = Ftha.loc[Ftha['NOC'] == 'THA']
Female

"""**จำนวนนักกีฬาหญิงทั้งหมดของประเทศไทย**"""

Female.Name.count()

"""**นักกีฬาขายทั้งหมดของประเทศไทย**"""

Mtha = olp_data[(olp_data.Sex == 'M')]
Male = Mtha.loc[Mtha['NOC'] == 'THA']
Male

"""**จำนวนนักกีฬาชายทั้งหมดของประเทศไทย**"""

Male.Name.count()

"""**รายชื่อนักกีฬาหญิงของประเทศไทยที่ได้รับเหรียญทอง เหรียญเงิน และเหรียญทองแดง ตามลำดับ**"""

FemaleG = Female.loc[Ftha['Medal'] == 'Gold']
FemaleG

FemaleS = Female.loc[Ftha['Medal'] == 'Silver']
FemaleS

FemaleB = Female.loc[Ftha['Medal'] == 'Bronze']
FemaleB

"""**รายชื่อนักกีฬาชายของประเทศไทยที่ได้รับเหรียญทอง เหรียญเงิน และเหรียญทองแดง ตามลำดับ**"""

MaleG = Male.loc[Mtha['Medal'] == 'Gold']
MaleG

MaleS = Male.loc[Mtha['Medal'] == 'Silver']
MaleS

MaleB = Male.loc[Mtha['Medal'] == 'Bronze']
MaleB

"""**มีนักกีฬาไทยที่ไปแข่งกีฬาโอลิมปิกทั้งหมด**"""

MedalsTHA.Name.count()

"""**การเข้าร่วมในกีฬาประเภทต่างๆของประเทศไมยในโอลิมปิก**"""



# Commented out IPython magic to ensure Python compatibility.
import numpy as np 
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import squarify 
# %matplotlib inline

tha_sport = data[data['Team']=='Thailand']['Sport'].value_counts().head(30)
plt.figure(figsize=(20,15))
g = squarify.plot(sizes=tha_sport.values, label=tha_sport.index, 
                  value=tha_sport.values,
                  alpha=.4,color=["red","green","blue", "grey"])
g.set_title("Thailand Participation in Various Sports",fontsize=20)
g.set_axis_off()
plt.show()